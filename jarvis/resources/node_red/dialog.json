[
    {
        "id": "cf515ba2.2548b",
        "type": "subflow",
        "name": "Wolfram",
        "info": "",
        "in": [
            {
                "x": 105.77777099609375,
                "y": 318.0000305175781,
                "wires": [
                    {
                        "id": "55e75cf7.8542fc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 756.1110229492188,
                "y": 318.0000915527344,
                "wires": [
                    {
                        "id": "edb3b2d6.803648",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "de584bec.288a88",
        "type": "http request",
        "z": "cf515ba2.2548b",
        "name": "wolfram",
        "method": "GET",
        "ret": "txt",
        "url": "http://api.wolframalpha.com/v2/query?appid=X3JT8P-GKT7Y8WJ36&includepodid=Result&input=\"{{{topic}}}\"",
        "tls": "",
        "x": 424.9998779296875,
        "y": 317.2222595214844,
        "wires": [
            [
                "edb3b2d6.803648"
            ]
        ]
    },
    {
        "id": "55e75cf7.8542fc",
        "type": "function",
        "z": "cf515ba2.2548b",
        "name": "Set url      ",
        "func": "var text = msg.payload.trim();\n\nnode.warn(\"Original question was: \" + text);\nmsg.topic = text;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 235.77777099609375,
        "y": 318.0000305175781,
        "wires": [
            [
                "de584bec.288a88"
            ]
        ]
    },
    {
        "id": "edb3b2d6.803648",
        "type": "function",
        "z": "cf515ba2.2548b",
        "name": "Set Response",
        "func": "msg.payload = \"Desculpe, nao entendi.\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 635.5,
        "y": 317.4000244140625,
        "wires": [
            []
        ]
    },
    {
        "id": "6edd93d3.185104",
        "type": "subflow",
        "name": "Wikipedia",
        "info": "",
        "in": [
            {
                "x": -35.50001525878906,
                "y": 383.5999755859375,
                "wires": [
                    {
                        "id": "e67babb1.863b78"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 909.5,
                "y": 385.20001220703125,
                "wires": [
                    {
                        "id": "ec21c361.252ee",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "928d80ed.505998",
        "type": "http request",
        "z": "6edd93d3.185104",
        "name": "Wikipedia",
        "method": "GET",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 231.49998474121094,
        "y": 383.20001220703125,
        "wires": [
            [
                "352d9e48.1c4aca"
            ]
        ]
    },
    {
        "id": "a39efe75.cf9f7",
        "type": "function",
        "z": "6edd93d3.185104",
        "name": "Get Extract",
        "func": "var results = msg.payload;\n\nmsg.payload = results[0];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 567.5,
        "y": 383.20001220703125,
        "wires": [
            [
                "ec21c361.252ee"
            ]
        ]
    },
    {
        "id": "e67babb1.863b78",
        "type": "function",
        "z": "6edd93d3.185104",
        "name": "Set url      ",
        "func": "// base url\nvar url = \"https://pt.wikipedia.org/w/api.php?action=query&prop=extracts&format=json&exintro&exsentences=1&titles=\";\nvar text = msg.payload.trim();\n\nvar textToSearch;\n\nnode.warn(\"Original question was: \" + text);\n\ntext = text.replace(/\\so$/ig,'');\n\nvar regex = /\\s+/;\nvar matches = text.split(regex);\n\nif (matches)\n{\n    var originalText = matches[matches.length-1];\n    textToSearch = originalText.replace(/[^A-Z]/ig,'');\n}\n\nnode.warn(\"Text to be searched is \" + textToSearch);\nmsg.url = url+textToSearch;\n\nnode.warn(\"URL is : \" + msg.url);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 85.49998474121094,
        "y": 383.5999755859375,
        "wires": [
            [
                "928d80ed.505998"
            ]
        ]
    },
    {
        "id": "ec21c361.252ee",
        "type": "function",
        "z": "6edd93d3.185104",
        "name": "Strip html",
        "func": "var response = msg.payload;\n\nif (response)\n{\n    response=response.replace(/<[^>]*>?/g,'');\n    response=response.replace(/\\([^)]*\\)?/g,'');\n    response=response.replace(/\\n/g,'');\n    \n    msg.payload = response;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 752.5,
        "y": 384.60003662109375,
        "wires": [
            []
        ]
    },
    {
        "id": "352d9e48.1c4aca",
        "type": "jsonpath",
        "z": "6edd93d3.185104",
        "expression": "$.query.pages.*.extract",
        "split": false,
        "name": "Get Extract",
        "x": 401.20001220703125,
        "y": 383.20001220703125,
        "wires": [
            [
                "a39efe75.cf9f7"
            ]
        ]
    },
    {
        "id": "c3ce0d31.1bdfa8",
        "type": "tab",
        "label": "JARVIS Dialog"
    },
    {
        "id": "d0f08741.ef79b8",
        "type": "http in",
        "z": "c3ce0d31.1bdfa8",
        "name": "GET /jarvisdialog",
        "url": "/jarvisdialog",
        "method": "get",
        "swaggerDoc": "",
        "x": 106.19999694824219,
        "y": 98.19999694824219,
        "wires": [
            [
                "713c66ab.8189d8"
            ]
        ]
    },
    {
        "id": "713c66ab.8189d8",
        "type": "change",
        "z": "c3ce0d31.1bdfa8",
        "name": "Set Payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.query.text",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "question",
                "pt": "flow",
                "to": "req.query.text",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 316.1999969482422,
        "y": 98.19998168945312,
        "wires": [
            [
                "4135238d.e83314"
            ]
        ]
    },
    {
        "id": "4135238d.e83314",
        "type": "watson-conversation-v1",
        "z": "c3ce0d31.1bdfa8",
        "name": "Conversation",
        "workspaceid": "4a1ad54c-abe0-421e-a9e3-19d9bb922466",
        "multiuser": false,
        "context": true,
        "empty-payload": false,
        "default-endpoint": false,
        "service-endpoint": "",
        "timeout": "",
        "optout-learning": false,
        "x": 516.1999969482422,
        "y": 134.19998168945312,
        "wires": [
            [
                "7ace8b90.fb1a34"
            ]
        ]
    },
    {
        "id": "7ace8b90.fb1a34",
        "type": "function",
        "z": "c3ce0d31.1bdfa8",
        "name": "Extract info",
        "func": "var intent;\nvar text;\nvar action;\nvar entity;\n\nif (msg.payload.intents[0])\n{\n    intent = msg.payload.intents[0].intent;\n    node.status({fill: \"green\", shape: \"dot\", text: \"Has intents\"});\n}\n\nif (msg.payload.entities[0])\n{\n    entity = msg.payload.entities[0].entity;\n    node.status({fill: \"green\", shape: \"dot\", text: \"Has entities\"});\n}\n\nvar text   = msg.payload.output.text[0];\n\naction = intent;\n\nnode.warn(\"Intent is \" + intent);\nnode.warn(\"Entity is \" + entity);\nnode.warn(\"Action is \" + action);\nnode.warn(\"Text   is \" + text);\n\nflow.set(\"action\", action);\nflow.set(\"intent\", intent);\nflow.set(\"entity\", entity);\nflow.set(\"text\", text);\n\nmsg.payload = {\n  \"selector\": {\n    \"code\": action\n  },\n  \"fields\": [\n  ],\n  \"sort\": [\n    {\n      \"_id\": \"asc\"\n    }\n  ]\n}\n\nsetTimeout(() => { node.status({});}, 2000);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 715.2000122070312,
        "y": 134.1999969482422,
        "wires": [
            [
                "41eae936.1831"
            ]
        ]
    },
    {
        "id": "7413d3d4.105474",
        "type": "http response",
        "z": "c3ce0d31.1bdfa8",
        "name": "Respond",
        "statusCode": "",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1062.2000732421875,
        "y": 553.2000732421875,
        "wires": []
    },
    {
        "id": "427e3931.411798",
        "type": "function",
        "z": "c3ce0d31.1bdfa8",
        "name": "Build Response",
        "func": "var intent = flow.get(\"intent\");\nvar action = flow.get(\"action\");\nvar text   = flow.get(\"text\");\nvar entity = flow.get(\"entity\")\nvar hasAction = false;\n\nvar mqtt = {};\n        \nmqtt.url = \"tcp://kj78sj.messaging.internetofthings.ibmcloud.com:1883\";\nmqtt.user = \"a-kj78sj-4fw1gsxso6\";\nmqtt.pass = \"t1m@Y5VTvEXJz7hljt\";\nmqtt.clientId = \"a:kj78sj:jarvis\";\n        \nvar response = '{ \"actions\": [ ';\n\nif (entity == \"netflix\") {\n    action = \"netflix\";\n}\n\nif (entity == \"Tv\" && intent == \"desligar\") {\n    action = \"turnofftv\"\n}\n\nif (action)\n{\n    if (action == \"iniciarapresentacao\")\n    {\n        mqtt.topic = \"iot-2/type/Raspberry/id/Jarvis/cmd/startPresentation/fmt/json\";\n\n        hasAction = true;\n        response +='{\"code\": \"' + action + '\",\"action\":\"MODULE\",\"parameters\":[\"mqttevent\",\"' + mqtt.url + '\",\"' + mqtt.topic +'\",\"{ d: { value : 10 } }\",\"'+mqtt.user+'\",\"'+mqtt.pass+'\",\"'+mqtt.clientId+'\"],\"synchronous\":true }';\n        text = \"NONE\";\n    }\n    if (action == \"tocarmusica\")\n    {\n        hasAction = true;\n        var searchString = text.replace(/tocar?/g, '');\n        searchString = searchString.replace(/uma?/g, '');\n        searchString = searchString.replace(/ /g, '');\n        \n        response +='{\"code\": \"' + action + '\",\"action\":\"PLAY\",\"parameters\":[\"ok, procurando.\"],\"synchronous\":true }, ';\n        response +='{\"code\": \"' + action + '\",\"action\":\"MODULE\",\"parameters\":[\"music\",\"' + searchString + '\"],\"synchronous\":true }';\n        text = \"NONE\";\n    }\n    else if (action == \"adicionarfilaimpressao\")\n    {\n        hasAction = true;\n        text = text.replace(/\\so\\s*$/ig,'');\n        text = text.replace(/\\s+$/ig,'');\n\n        var name;\n        var regex = /\\s+/;\n        var matches = text.split(regex);\n        \n        if (matches)\n        {\n            var originalText = matches[matches.length-1];\n            name = originalText.replace(/[^A-Z]/ig,'');\n        }\n\n        mqtt.topic = \"iot-2/type/Raspberry/id/Jarvis/cmd/addToPrinterQueue/fmt/json\";\n\n        hasAction = true;\n        response +='{\"code\": \"' + action + '\",\"action\":\"MODULE\",\"parameters\":[\"mqttevent\",\"' + mqtt.url + '\",\"' + mqtt.topic +'\",\"{ d: { name : ' + name + ' } }\",\"'+mqtt.user+'\",\"'+mqtt.pass+'\",\"'+mqtt.clientId+'\"],\"synchronous\":true }';\n        text = name + \" adicionado com sucesso. \";\n    }\n    else if (action == \"listarfilaimpressao\")\n    {\n        mqtt.topic = \"iot-2/type/Raspberry/id/Jarvis/cmd/listPrintQueue/fmt/json\";\n\n        hasAction = true;\n        response +='{\"code\": \"' + action + '\",\"action\":\"MODULE\",\"parameters\":[\"mqttpull\",\"' + mqtt.url + '\",\"' + mqtt.topic +'\",\"'+mqtt.user+'\",\"'+mqtt.pass+'\",\"'+mqtt.clientId+'\"],\"synchronous\":true }';\n        text = \"NONE\";\n    }\n    else if (action == \"limparfilaimpressao\")\n    {\n        mqtt.topic = \"iot-2/type/Raspberry/id/Jarvis/cmd/clearPrintQueue/fmt/json\";\n\n        hasAction = true;\n        response +='{\"code\": \"' + action + '\",\"action\":\"MODULE\",\"parameters\":[\"mqttevent\",\"' + mqtt.url + '\",\"' + mqtt.topic +'\",\"{ d: { command : clear } }\",\"'+mqtt.user+'\",\"'+mqtt.pass+'\",\"'+mqtt.clientId+'\"],\"synchronous\":true }';\n        text = \"Fila impressao limpa.\";\n    }    \n    else if (action == \"iniciarimpressao\")\n    {\n        mqtt.topic = \"iot-2/type/Raspberry/id/Jarvis/cmd/startPrinter/fmt/json\";\n\n        hasAction = true;\n        response +='{\"code\": \"' + action + '\",\"action\":\"MODULE\",\"parameters\":[\"mqttevent\",\"' + mqtt.url + '\",\"' + mqtt.topic +'\",\"{ d: { command : start } }\",\"'+mqtt.user+'\",\"'+mqtt.pass+'\",\"'+mqtt.clientId+'\"],\"synchronous\":true }';\n        text = \"Impressao iniciada.\";\n    }\n    else if (action == \"tocarvideo\")\n    {\n        hasAction = true;\n        var searchString = text.replace(/assisti.?/g, '');\n        searchString = searchString.replace(/v.deo/g, '');\n        searchString = searchString.replace(/uma?/g, '');\n        searchString = searchString.replace(/ /g, '');\n    \n        response +='{\"code\": \"' + action + '\",\"action\":\"PLAY\",\"parameters\":[\"ok, procurando.\"],\"synchronous\":true }, ';    \n        response +='{\"code\": \"' + action + '\",\"action\":\"MODULE\",\"parameters\":[\"video\",\"' + searchString + '\"],\"synchronous\":true }';\n        text = \"NONE\";\n    }\n    else if (action == \"piada\")\n    {\n        hasAction = true;\n        response +='{\"code\": \"' + action + '\",\"action\":\"MODULE\",\"parameters\":[\"joke\"],\"synchronous\":true }';\n    }\n    else if (action == \"listar_agenda\")\n    {\n        hasAction = true;\n        response +='{\"code\": \"' + action + '\",\"action\":\"MODULE\",\"parameters\":[\"reminder\",\"LIST\"],\"synchronous\":true }';\n    }    \n    else if (action == \"noticias\")\n    {\n        hasAction = true;\n        response +='{\"code\": \"' + action + '\",\"action\":\"MODULE\",\"parameters\":[\"news\"],\"synchronous\":true }';\n    }\n    else if (action == \"previsaotempo\")\n    {\n        hasAction = true;\n        response +='{\"code\": \"' + action + '\",\"action\":\"MODULE\",\"parameters\":[\"weather\"],\"synchronous\":true }';\n    }\n    else if (action == \"tirarfoto\")\n    {\n        hasAction = true;\n        response +='{\"code\": \"' + action + '\",\"action\":\"PLAY\",\"parameters\":[\"diga x!\"],\"synchronous\":true }, ';\n        response +='{\"code\": \"' + action + '\",\"action\":\"EXECUTE\",\"parameters\":[\"/home/pi/jarvis/jarvis/scripts/webcam.sh\"],\"synchronous\":true }';\n    }\n    else if (action == \"netflix\")\n    {\n        hasAction = true;\n        response +='{\"code\": \"' + action + '\",\"action\":\"MODULE\",\"parameters\":[\"tv\", \"netflix\"],\"synchronous\":true }';\n    }\n    else if (action == \"turnofftv\")\n    {\n        hasAction = true;\n        response +='{\"code\": \"' + action + '\",\"action\":\"MODULE\",\"parameters\":[\"tv\", \"turnoff\"],\"synchronous\":true }';\n    }\n    else if (action == \"horas\")\n    {\n        hasAction = true;\n        var d = new Date();\n        var offset = -2;\n        \n        var utc = d.getTime() + (d.getTimezoneOffset() * 60000);\n\n        var date = new Date(utc + (3600000*offset));\n        var minutes = date.getMinutes();\n        var hour = date.getHours();\n        \n        var timeText = \"Sao \" + hour + (hour > 1 ? \" horas\" : \" hora\") + \" e \" + minutes + (minutes > 1 ? \" minutos\" : \" minuto\") + \"!\";\n        \n        response +='{\"code\": \"' + action + '\",\"action\":\"PLAY\",\"parameters\":[\"' + timeText + '\"],\"synchronous\":true } ';\n    }\n    else if (action == \"filmar\")\n    {\n        hasAction = true;\n        response +='{\"code\": \"' + action + '\",\"action\":\"EXECUTE\",\"parameters\":[\"/home/pi/jarvis/jarvis/scripts/streamToYoutube.sh\"],\"synchronous\":true }';\n    }\n\n}\n\nif (text != \"NONE\")\n{\n    if (hasAction)\n    {\n        response += \",\";\n    }\n    \n    response += '{    \"code\": \"PLAY_TEXT\",\t\"action\": \"PLAY\",\t\"parameters\": [ \"' + text + '\"\t],      \"synchronous\": true  } ';\n}\n\nif (action)\n{\n    if (action == \"STOP\")\n    {\n        hasAction = true;\n        response +=', {\"code\": \"' + action + '\",\"action\":\"STOP\",\"synchronous\":true }';\n    }\n}\n\nresponse += \" ] } \"\n\nmsg.payload = response;\n\nif (action)\n{\n    node.status({fill: \"green\", form: \"dot\", text: \"Action is \" + action});\n    setTimeout(() => { node.status({}) }, 2000);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 985.5943603515625,
        "y": 239.01113891601562,
        "wires": [
            [
                "7413d3d4.105474"
            ]
        ]
    },
    {
        "id": "e47fbef9.4362b",
        "type": "http in",
        "z": "c3ce0d31.1bdfa8",
        "name": "POST /jarvisdialog",
        "url": "/jarvisdialog",
        "method": "post",
        "swaggerDoc": "",
        "x": 102.39999389648438,
        "y": 177.40000915527344,
        "wires": [
            [
                "b592c44.7abe2b8"
            ]
        ]
    },
    {
        "id": "b592c44.7abe2b8",
        "type": "function",
        "z": "c3ce0d31.1bdfa8",
        "name": "Set Payload",
        "func": "var text = msg.req.body.parameter;\n\nmsg.payload = text;\n\nflow.set(\"question\", text);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 316.6999969482422,
        "y": 176.99998474121094,
        "wires": [
            [
                "4135238d.e83314"
            ]
        ]
    },
    {
        "id": "23801348.e93cc4",
        "type": "comment",
        "z": "c3ce0d31.1bdfa8",
        "name": "JARVIS main dialog flow. Can identify texts and actions.",
        "info": "",
        "x": 227.09999084472656,
        "y": 38.79998779296875,
        "wires": []
    },
    {
        "id": "41eae936.1831",
        "type": "switch",
        "z": "c3ce0d31.1bdfa8",
        "name": "Define something?",
        "property": "text",
        "propertyType": "flow",
        "rules": [
            {
                "t": "neq",
                "v": "CALL_DISCOVERY",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 337.98895263671875,
        "y": 252.57781982421875,
        "wires": [
            [
                "15f9f610.74aa42"
            ],
            [
                "461d206b.b5b4d"
            ]
        ]
    },
    {
        "id": "ee7b2f9f.16b4b8",
        "type": "subflow:6edd93d3.185104",
        "z": "c3ce0d31.1bdfa8",
        "name": "Call wikipedia",
        "x": 252.08889770507812,
        "y": 469.211181640625,
        "wires": [
            [
                "64d807d.94d1978"
            ]
        ]
    },
    {
        "id": "461d206b.b5b4d",
        "type": "change",
        "z": "c3ce0d31.1bdfa8",
        "name": "Set question",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "question",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 158.5889129638672,
        "y": 381.51116943359375,
        "wires": [
            [
                "ee7b2f9f.16b4b8"
            ]
        ]
    },
    {
        "id": "64d807d.94d1978",
        "type": "function",
        "z": "c3ce0d31.1bdfa8",
        "name": "Set Response",
        "func": "var response = \"Nao encontrei essa informacao.\";\n\nif (msg.payload)\n{\n    node.status({fill: \"green\", shape: \"dot\", text: \"Response found!\"});\n\n    if (\n        !msg.payload.match(/may refer to:/) &&\n        !msg.payload.match(/This is a redirect from/)\n    )\n    {\n        response = msg.payload;\n    }\n}\nelse\n{\n    node.status({fill: \"red\", shape: \"dot\", text: \"No Response found!\"});\n}\n\nflow.set(\"text\", response);\n\nsetTimeout(() => { node.status({});}, 2000);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 365.28892517089844,
        "y": 381.51116943359375,
        "wires": [
            [
                "427e3931.411798"
            ]
        ]
    },
    {
        "id": "9cbac245.0566b8",
        "type": "catch",
        "z": "c3ce0d31.1bdfa8",
        "name": "Catch",
        "scope": null,
        "x": 70.90000915527344,
        "y": 552.8000335693359,
        "wires": [
            [
                "5b13919f.ce9988"
            ]
        ]
    },
    {
        "id": "5b13919f.ce9988",
        "type": "function",
        "z": "c3ce0d31.1bdfa8",
        "name": "Set default error message",
        "func": "flow.set(\"Desculpe, algum erro aconteceu.\");\nflow.set(\"action\", undefined);\nflow.set(\"intent\", undefined);\nflow.set(\"entity\", undefined);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 507.27777099609375,
        "y": 553.4000244140625,
        "wires": [
            [
                "7413d3d4.105474"
            ]
        ]
    },
    {
        "id": "15f9f610.74aa42",
        "type": "switch",
        "z": "c3ce0d31.1bdfa8",
        "name": "Try wolfram?",
        "property": "text",
        "propertyType": "flow",
        "rules": [
            {
                "t": "neq",
                "v": "NOT_RECOGNIZED",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 593.6666259765625,
        "y": 246.66673278808594,
        "wires": [
            [
                "427e3931.411798"
            ],
            [
                "e9820af2.f99968"
            ]
        ]
    },
    {
        "id": "e9820af2.f99968",
        "type": "change",
        "z": "c3ce0d31.1bdfa8",
        "name": "Set question",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "question",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 589.3333740234375,
        "y": 385.3333435058594,
        "wires": [
            [
                "df0ae664.887f8"
            ]
        ]
    },
    {
        "id": "f3aad1c1.290c",
        "type": "function",
        "z": "c3ce0d31.1bdfa8",
        "name": "Set Response",
        "func": "var response = \"Nao encontrei essa informacao.\";\n\nif (msg.payload)\n{\n    node.status({fill: \"green\", shape: \"dot\", text: \"Response found!\"});\n\n    if (\n        !msg.payload.match(/may refer to:/) &&\n        !msg.payload.match(/This is a redirect from/)\n    )\n    {\n        response = msg.payload;\n    }\n}\nelse\n{\n    node.status({fill: \"red\", shape: \"dot\", text: \"No Response found!\"});\n}\n\nflow.set(\"text\", response);\n\nsetTimeout(() => { node.status({});}, 2000);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 787.3889770507812,
        "y": 382.2778015136719,
        "wires": [
            [
                "427e3931.411798"
            ]
        ]
    },
    {
        "id": "df0ae664.887f8",
        "type": "subflow:cf515ba2.2548b",
        "z": "c3ce0d31.1bdfa8",
        "name": "Call wolfram",
        "x": 683.3889770507812,
        "y": 447.8333740234375,
        "wires": [
            [
                "f3aad1c1.290c"
            ]
        ]
    }
]